.if false
==================================================================================
	Copyright (c) 2019 Nokia 
	Copyright (c) 2018-2019 AT&T Intellectual Property.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
==================================================================================
.fi

.if false
	Mnemonic	rmr_init_trace_man.xfm
	Abstract	The manual page for the rmr_init_trace function.
	Author		E. Scott Daniels
	Date		19 April 2019
.fi

.gv e LIB lib
.im &{lib}/man/setup.im 

&line_len(6i)

&h1(RMR Library Functions)
&h2(NAME)
	rmr_init_trace

&h2(SYNOPSIS)
&indent
&ex_start
#include <rmr/rmr.h>

void* rmr_init_trace( void* ctx )
&ex_end

&uindent

&h2(DESCRIPTION)
The &cw(rmr_init_trace) function establishes the default trace space placed in each 
message buffer allocated with &cw(rmr_alloc_msg().)
If this function is never called, then no trace space is allocated by default into
any message buffer. 

.sp
Trace space allows the user application to pass some trace token, or other data
with the message, but outside of the payload.
Trace data may be added to any message with &cw(rmr_set_trace(),) and may be extracted
from a message with &cw(rmr_get_trace().)  
The number of bytes that a message contains for/with trace data can be determined by
invoking &cw(rmr_get_trlen().) 

.sp
This function may be safely called at any time during the life of the user programme
to (re)set the default trace space reserved.  
If the user programme needs to allocate a message with trace space of a different
size than is allocated by default, without fear of extra overhead of reallocating 
a message later, the &cw(rmr_tralloc_msg()) function can be used.

&h2(RETURN VALUE)
A value of 1 is returned on success, and 0 on failure.  A failure indicates that the 
RMr context (a void pointer passed to this function was not valid.

&h2(SEE ALSO )
.ju off
rmr_alloc_msg(3),
rmr_tr_alloc_msg(3),
rmr_call(3),
rmr_free_msg(3),
rmr_get_rcvfd(3),
rmr_get_trace(3),
rmr_get_trlen(3),
rmr_payload_size(3),
rmr_send_msg(3),
rmr_rcv_msg(3),
rmr_rcv_specific(3),
rmr_rts_msg(3),
rmr_ready(3),
rmr_fib(3),
rmr_has_str(3),
rmr_tokenise(3),
rmr_mk_ring(3),
rmr_ring_free(3),
rmr_set_trace(3)
.ju on

